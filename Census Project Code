{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Census Project Aditya Sheth (Updated Copy with Race)",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/perisa-ashar/Crab-Trap-App/blob/master/Census%20Project%20Code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hU9rz5YDsFha"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mYrNfE_vsDq0"
      },
      "source": [
        "df= pd.read_csv('/content/sample_data/census_data.csv')"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eWMOPY9HIRPR",
        "outputId": "cf3f0de6-e2f3-44ce-ccff-6dc4478f021b"
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['age', 'workclass', 'education_level', 'education-num',\n",
              "       'marital-status', 'occupation', 'relationship', 'race', 'sex',\n",
              "       'capital-gain', 'capital-loss', 'hours-per-week', 'native-country',\n",
              "       'income'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "jRh0noDrskm2",
        "outputId": "0dadabea-a5f4-494b-8e2b-1e5710f39f9a"
      },
      "source": [
        "df.head(20)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>workclass</th>\n",
              "      <th>education_level</th>\n",
              "      <th>education-num</th>\n",
              "      <th>marital-status</th>\n",
              "      <th>occupation</th>\n",
              "      <th>relationship</th>\n",
              "      <th>race</th>\n",
              "      <th>sex</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "      <th>native-country</th>\n",
              "      <th>income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39</td>\n",
              "      <td>State-gov</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>2174</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50</td>\n",
              "      <td>Self-emp-not-inc</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>38</td>\n",
              "      <td>Private</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53</td>\n",
              "      <td>Private</td>\n",
              "      <td>11th</td>\n",
              "      <td>7</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Husband</td>\n",
              "      <td>Black</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Wife</td>\n",
              "      <td>Black</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>Cuba</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>37</td>\n",
              "      <td>Private</td>\n",
              "      <td>Masters</td>\n",
              "      <td>14</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Wife</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>49</td>\n",
              "      <td>Private</td>\n",
              "      <td>9th</td>\n",
              "      <td>5</td>\n",
              "      <td>Married-spouse-absent</td>\n",
              "      <td>Other-service</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>Black</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>Jamaica</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>52</td>\n",
              "      <td>Self-emp-not-inc</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>31</td>\n",
              "      <td>Private</td>\n",
              "      <td>Masters</td>\n",
              "      <td>14</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>14084</td>\n",
              "      <td>0</td>\n",
              "      <td>50</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>42</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>5178</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>37</td>\n",
              "      <td>Private</td>\n",
              "      <td>Some-college</td>\n",
              "      <td>10</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>Black</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>80</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>30</td>\n",
              "      <td>State-gov</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Husband</td>\n",
              "      <td>Asian-Pac-Islander</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>India</td>\n",
              "      <td>&gt;50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>23</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Own-child</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>32</td>\n",
              "      <td>Private</td>\n",
              "      <td>Assoc-acdm</td>\n",
              "      <td>12</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Sales</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>Black</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>50</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>40</td>\n",
              "      <td>Private</td>\n",
              "      <td>Assoc-voc</td>\n",
              "      <td>11</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Craft-repair</td>\n",
              "      <td>Husband</td>\n",
              "      <td>Asian-Pac-Islander</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>?</td>\n",
              "      <td>&gt;50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>34</td>\n",
              "      <td>Private</td>\n",
              "      <td>7th-8th</td>\n",
              "      <td>4</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Transport-moving</td>\n",
              "      <td>Husband</td>\n",
              "      <td>Amer-Indian-Eskimo</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>25</td>\n",
              "      <td>Self-emp-not-inc</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Farming-fishing</td>\n",
              "      <td>Own-child</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>32</td>\n",
              "      <td>Private</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Machine-op-inspct</td>\n",
              "      <td>Unmarried</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>38</td>\n",
              "      <td>Private</td>\n",
              "      <td>11th</td>\n",
              "      <td>7</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Sales</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>50</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>43</td>\n",
              "      <td>Self-emp-not-inc</td>\n",
              "      <td>Masters</td>\n",
              "      <td>14</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Unmarried</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    age          workclass  ...  native-country  income\n",
              "0    39          State-gov  ...   United-States   <=50K\n",
              "1    50   Self-emp-not-inc  ...   United-States   <=50K\n",
              "2    38            Private  ...   United-States   <=50K\n",
              "3    53            Private  ...   United-States   <=50K\n",
              "4    28            Private  ...            Cuba   <=50K\n",
              "5    37            Private  ...   United-States   <=50K\n",
              "6    49            Private  ...         Jamaica   <=50K\n",
              "7    52   Self-emp-not-inc  ...   United-States    >50K\n",
              "8    31            Private  ...   United-States    >50K\n",
              "9    42            Private  ...   United-States    >50K\n",
              "10   37            Private  ...   United-States    >50K\n",
              "11   30          State-gov  ...           India    >50K\n",
              "12   23            Private  ...   United-States   <=50K\n",
              "13   32            Private  ...   United-States   <=50K\n",
              "14   40            Private  ...               ?    >50K\n",
              "15   34            Private  ...          Mexico   <=50K\n",
              "16   25   Self-emp-not-inc  ...   United-States   <=50K\n",
              "17   32            Private  ...   United-States   <=50K\n",
              "18   38            Private  ...   United-States   <=50K\n",
              "19   43   Self-emp-not-inc  ...   United-States    >50K\n",
              "\n",
              "[20 rows x 14 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "HaMSIq8tspW5",
        "outputId": "d346410e-b690-4719-ed5b-365effca4d0a"
      },
      "source": [
        "len(df)\n",
        "\n",
        "df.columns\n",
        "\n",
        "df.describe()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>education-num</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>48842.000000</td>\n",
              "      <td>48842.000000</td>\n",
              "      <td>48842.000000</td>\n",
              "      <td>48842.000000</td>\n",
              "      <td>48842.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>38.643585</td>\n",
              "      <td>10.078089</td>\n",
              "      <td>1079.067626</td>\n",
              "      <td>87.502314</td>\n",
              "      <td>40.422382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>13.710510</td>\n",
              "      <td>2.570973</td>\n",
              "      <td>7452.019058</td>\n",
              "      <td>403.004552</td>\n",
              "      <td>12.391444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>28.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>40.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>37.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>40.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>48.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>45.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>90.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>99999.000000</td>\n",
              "      <td>4356.000000</td>\n",
              "      <td>99.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                age  education-num  capital-gain  capital-loss  hours-per-week\n",
              "count  48842.000000   48842.000000  48842.000000  48842.000000    48842.000000\n",
              "mean      38.643585      10.078089   1079.067626     87.502314       40.422382\n",
              "std       13.710510       2.570973   7452.019058    403.004552       12.391444\n",
              "min       17.000000       1.000000      0.000000      0.000000        1.000000\n",
              "25%       28.000000       9.000000      0.000000      0.000000       40.000000\n",
              "50%       37.000000      10.000000      0.000000      0.000000       40.000000\n",
              "75%       48.000000      12.000000      0.000000      0.000000       45.000000\n",
              "max       90.000000      16.000000  99999.000000   4356.000000       99.000000"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 739
        },
        "id": "xsq872asRme8",
        "outputId": "7199baf9-4ca6-43d6-91b7-3be3f91388d3"
      },
      "source": [
        "df"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>workclass</th>\n",
              "      <th>education_level</th>\n",
              "      <th>education-num</th>\n",
              "      <th>marital-status</th>\n",
              "      <th>occupation</th>\n",
              "      <th>relationship</th>\n",
              "      <th>race</th>\n",
              "      <th>sex</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "      <th>native-country</th>\n",
              "      <th>income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39</td>\n",
              "      <td>State-gov</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>2174</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50</td>\n",
              "      <td>Self-emp-not-inc</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>38</td>\n",
              "      <td>Private</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53</td>\n",
              "      <td>Private</td>\n",
              "      <td>11th</td>\n",
              "      <td>7</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Husband</td>\n",
              "      <td>Black</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Wife</td>\n",
              "      <td>Black</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>Cuba</td>\n",
              "      <td>&lt;=50K</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48837</th>\n",
              "      <td>39</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48838</th>\n",
              "      <td>64</td>\n",
              "      <td>?</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Widowed</td>\n",
              "      <td>?</td>\n",
              "      <td>Other-relative</td>\n",
              "      <td>Black</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48839</th>\n",
              "      <td>38</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>50</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48840</th>\n",
              "      <td>44</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Own-child</td>\n",
              "      <td>Asian-Pac-Islander</td>\n",
              "      <td>Male</td>\n",
              "      <td>5455</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48841</th>\n",
              "      <td>35</td>\n",
              "      <td>Self-emp-inc</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married-civ-spouse</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>48842 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       age          workclass  ...  native-country   income\n",
              "0       39          State-gov  ...   United-States    <=50K\n",
              "1       50   Self-emp-not-inc  ...   United-States    <=50K\n",
              "2       38            Private  ...   United-States    <=50K\n",
              "3       53            Private  ...   United-States    <=50K\n",
              "4       28            Private  ...            Cuba    <=50K\n",
              "...    ...                ...  ...             ...      ...\n",
              "48837   39            Private  ...   United-States   <=50K.\n",
              "48838   64                  ?  ...   United-States   <=50K.\n",
              "48839   38            Private  ...   United-States   <=50K.\n",
              "48840   44            Private  ...   United-States   <=50K.\n",
              "48841   35       Self-emp-inc  ...   United-States    >50K.\n",
              "\n",
              "[48842 rows x 14 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "quuczQE4hzRs",
        "outputId": "a3cb4563-e662-436a-8176-056277a88d9d"
      },
      "source": [
        "df['education_level'].value_counts()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " HS-grad         15784\n",
              " Some-college    10878\n",
              " Bachelors        8025\n",
              " Masters          2657\n",
              " Assoc-voc        2061\n",
              " 11th             1812\n",
              " Assoc-acdm       1601\n",
              " 10th             1389\n",
              " 7th-8th           955\n",
              " Prof-school       834\n",
              " 9th               756\n",
              " 12th              657\n",
              " Doctorate         594\n",
              " 5th-6th           509\n",
              " 1st-4th           247\n",
              " Preschool          83\n",
              "Name: education_level, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qdxLPG08g8j6"
      },
      "source": [
        "# Data cleansing\n",
        "\n",
        "#lets do value counts. Are there any nulls in the data\n",
        "df['age'].value_counts()\n",
        "df['workclass'].value_counts() #has ? that needs to be filled in\n",
        "df['education_level'].value_counts()  # has too many categories. Can be reduced into broader categories\n",
        "df['education-num'].value_counts() \n",
        "df['marital-status'].value_counts() # can be reduced into broader categories (Married, Never Married, Seperated)\n",
        "df['occupation'].value_counts()  #has ? that needs to be filled in\n",
        "df['relationship'].value_counts()\n",
        "df['race'].value_counts()\n",
        "df['sex'].value_counts()\n",
        "df['native-country'].value_counts()#has ? that needs to be filled in\n",
        "df['income'].value_counts()  \n",
        "\n",
        "\n",
        "#fill ? with the largest value\n",
        "df['workclass'] = df['workclass'].str.replace('?','Private')\n",
        "df['workclass'].value_counts() #has ? that needs to be filled in\n",
        "\n",
        "df['native-country'] = df['native-country'].str.replace('?','United-States')\n",
        "df['native-country'].value_counts() \n",
        "\n",
        "df['income'] = df['income'].str.replace('<=50K.','<=50K')\n",
        "df['income'] = df['income'].str.replace('>50K.','>50K')\n",
        "df['income'].value_counts() \n",
        "\n",
        "#education\n",
        "df['education_level'] = df['education_level'].str.replace('Preschool','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('1st-4th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('5th-6th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('7th-8th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('9th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('10th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('11th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('12th','Pre-HS Grad')\n",
        "\n",
        "\n",
        "\n",
        "df['education_level'].value_counts()\n",
        "\n",
        "#marriage\n",
        "df['marital-status'] = df['marital-status'].str.replace('Married-civ-spouse','Married')\n",
        "df['marital-status'] = df['marital-status'].str.replace('Married-AF-spouse','Married')\n",
        "\n",
        "df['marital-status'] = df['marital-status'].str.replace('Divorced','Separated')\n",
        "df['marital-status'] = df['marital-status'].str.replace('Widowed','Separated')\n",
        "df['marital-status'] = df['marital-status'].str.replace('Married-spouse-absent','Separated')\n",
        "\n",
        "df['marital-status'].value_counts()\n",
        "\n",
        "#race\n",
        "df['race'] = df['race'].str.replace('Black','POC')\n",
        "df['race'] = df['race'].str.replace('Asian-Pac-Islander','POC')\n",
        "df['race'] = df['race'].str.replace('Amer-Indian-Eskimo','POC')\n",
        "df['race'] = df['race'].str.replace('Other','POC')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#\n",
        "\n",
        "# Remove outliers on hours per week\n",
        "#Q1 = df['hours-per-week'].quantile(0.25)\n",
        "#Q1\n",
        "\n",
        "#Q3 = df['hours-per-week'].quantile(0.75)\n",
        "#Q3\n",
        "\n",
        "#iqr = Q3-Q1\n",
        "#iqr\n",
        "\n",
        "#lower_limit = Q1 - 1.5*iqr\n",
        "#upper_limit = Q3 + 1.5*iqr\n",
        "#lower_limit, upper_limit\n",
        "\n",
        "#df[ (df['hours-per-week'] < lower_limit) | ( df['hours-per-week'] > upper_limit)].count()\n"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hyqRU9xYn_Ku"
      },
      "source": [
        "#add groupings for age\n",
        "age_group_conditions = [\n",
        "              (df['age'] <= 20),\n",
        "              (df['age'] >20) & (df['age'] <= 30),\n",
        "              (df['age'] >30) & (df['age'] <= 40),\n",
        "              (df['age'] >40) & (df['age'] <= 50),\n",
        "              (df['age'] >50) & (df['age'] <= 60),\n",
        "              (df['age'] >60) & (df['age'] <= 70),\n",
        "              (df['age'] >70) & (df['age'] <= 80),\n",
        "              (df['age'] >80) & (df['age'] <= 90)\n",
        "              \n",
        "]\n",
        "\n",
        "age_group_values = ['10-20','21-30', '31-40','41-50','51-60','61-70','71-80','81-90']\n",
        "\n",
        "df['age-group'] = np.select(age_group_conditions, age_group_values)\n",
        "\n"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 358
        },
        "id": "-Ej_RYbUqTeA",
        "outputId": "1134ef81-6e7a-47b7-a16d-ed0529f57e8e"
      },
      "source": [
        "#add groupings for hours per week\n",
        "hours_group_conditions = [\n",
        "              (df['hours-per-week'] <= 20),\n",
        "              (df['hours-per-week'] > 20) & (df['hours-per-week'] < 40),\n",
        "              (df['hours-per-week'] == 40),\n",
        "              (df['hours-per-week'] >= 40) & (df['hours-per-week'] <= 60),\n",
        "              (df['hours-per-week'] > 60) & (df['hours-per-week'] <= 80),\n",
        "              (df['hours-per-week'] >= 80)\n",
        "              \n",
        "]\n",
        "hours_group_values = ['0-20','21-40', '40','41-60','61-80','>80']\n",
        "\n",
        "df['hour-per-week-group'] = np.select(hours_group_conditions, hours_group_values)\n",
        "df.head(5)\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>workclass</th>\n",
              "      <th>education_level</th>\n",
              "      <th>education-num</th>\n",
              "      <th>marital-status</th>\n",
              "      <th>occupation</th>\n",
              "      <th>relationship</th>\n",
              "      <th>race</th>\n",
              "      <th>sex</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "      <th>native-country</th>\n",
              "      <th>income</th>\n",
              "      <th>age-group</th>\n",
              "      <th>hour-per-week-group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39</td>\n",
              "      <td>State-gov</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>2174</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>31-40</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50</td>\n",
              "      <td>Self-emp-not-inc</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Husband</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>41-50</td>\n",
              "      <td>0-20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>38</td>\n",
              "      <td>Private</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Separated</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>31-40</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53</td>\n",
              "      <td>Private</td>\n",
              "      <td>Pre-HS Grad</td>\n",
              "      <td>7</td>\n",
              "      <td>Married</td>\n",
              "      <td>Handlers-cleaners</td>\n",
              "      <td>Husband</td>\n",
              "      <td>POC</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>51-60</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Wife</td>\n",
              "      <td>POC</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>Cuba</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>21-30</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   age          workclass education_level  ...  income age-group hour-per-week-group\n",
              "0   39          State-gov       Bachelors  ...   <=50K     31-40                  40\n",
              "1   50   Self-emp-not-inc       Bachelors  ...   <=50K     41-50                0-20\n",
              "2   38            Private         HS-grad  ...   <=50K     31-40                  40\n",
              "3   53            Private     Pre-HS Grad  ...   <=50K     51-60                  40\n",
              "4   28            Private       Bachelors  ...   <=50K     21-30                  40\n",
              "\n",
              "[5 rows x 16 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XFDkPkDilWML",
        "outputId": "a6a0a33b-39de-4851-ac49-5ecb92aa6eef"
      },
      "source": [
        "df['education_level'].value_counts()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " HS-grad         15784\n",
              " Some-college    10878\n",
              " Bachelors        8025\n",
              " Pre-HS Grad      6408\n",
              " Masters          2657\n",
              " Assoc-voc        2061\n",
              " Assoc-acdm       1601\n",
              " Prof-school       834\n",
              " Doctorate         594\n",
              "Name: education_level, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fokoTJb4JVnx"
      },
      "source": [
        "\n",
        "# Plots\n",
        "\n",
        "\n",
        "#lets do value counts. Are there any nulls in the data\n",
        "df['age'].value_counts()\n",
        "df['workclass'].value_counts() #has ? that needs to be filled in\n",
        "df['education_level'].value_counts()  # has too many categories. Can be reduced into broader categories\n",
        "df['education-num'].value_counts() \n",
        "df['marital-status'].value_counts() # can be reduced into broader categories (Married, Never Married, Seperated)\n",
        "df['occupation'].value_counts()  #has ? that needs to be filled in\n",
        "df['relationship'].value_counts()\n",
        "df['race'].value_counts()\n",
        "df['sex'].value_counts()\n",
        "df['native-country'].value_counts()#has ? that needs to be filled in\n",
        "df['income'].value_counts()  \n",
        "\n",
        "\n",
        "#fill ? with the largest value\n",
        "df['workclass'] = df['workclass'].str.replace('?','Private')\n",
        "df['workclass'].value_counts() #has ? that needs to be filled in\n",
        "\n",
        "df['native-country'] = df['native-country'].str.replace('?','United-States')\n",
        "df['native-country'].value_counts() \n",
        "\n",
        "df['income'] = df['income'].str.replace('<=50K.','<=50K')\n",
        "df['income'] = df['income'].str.replace('>50K.','>50K')\n",
        "df['income'].value_counts() \n",
        "\n",
        "df['education_level'] = df['education_level'].str.replace('Preschool','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('1st-4th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('5th-6th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('7th-8th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('9th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('10th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('11th','Pre-HS Grad')\n",
        "df['education_level'] = df['education_level'].str.replace('12th','Pre-HS Grad')\n",
        "\n",
        "df['education_level'] = df['education_level'].str.replace('Assoc-voc','Associate')\n",
        "df['education_level'] = df['education_level'].str.replace('Assoc-acdm','Assoicate')\n",
        "\n",
        "\n",
        "df['education_level'].value_counts()\n",
        "\n",
        "#marriage\n",
        "df['marital-status'] = df['marital-status'].str.replace('Married-civ-spouse','Married')\n",
        "df['marital-status'] = df['marital-status'].str.replace('Married-AF-spouse','Married')\n",
        "\n",
        "df['marital-status'] = df['marital-status'].str.replace('Divorced','Separated')\n",
        "df['marital-status'] = df['marital-status'].str.replace('Widowed','Separated')\n",
        "df['marital-status'] = df['marital-status'].str.replace('Married-spouse-absent','Separated')\n",
        "\n",
        "df['marital-status'].value_counts()\n",
        "\n",
        "#race\n",
        "df['race'] = df['race'].str.replace('Black','POC')\n",
        "df['race'] = df['race'].str.replace('Asian-Pac-Islander','POC')\n",
        "df['race'] = df['race'].str.replace('Amer-Indian-Eskimo','POC')\n",
        "df['race'] = df['race'].str.replace('Other','POC')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#\n",
        "\n",
        "# Remove outliers on hours per week\n",
        "#Q1 = df['hours-per-week'].quantile(0.25)\n",
        "#Q1\n",
        "\n",
        "#Q3 = df['hours-per-week'].quantile(0.75)\n",
        "#Q3\n",
        "\n",
        "#iqr = Q3-Q1\n",
        "#iqr\n",
        "\n",
        "#lower_limit = Q1 - 1.5*iqr\n",
        "#upper_limit = Q3 + 1.5*iqr\n",
        "#lower_limit, upper_limit\n",
        "\n",
        "#df[ (df['hours-per-week'] < lower_limit) | ( df['hours-per-week'] > upper_limit)].count()\n",
        "\n"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DArgD7WfAutW",
        "outputId": "7970322c-3eb5-4169-8b1f-3bf0dcdffe5a"
      },
      "source": [
        "df.groupby('race').count().loc[:, 'income']"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "race\n",
              " POC       7080\n",
              " White    41762\n",
              "Name: income, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "PsH9ruWzCsfI",
        "outputId": "8390df65-9707-470a-d7e1-13c2d101dabc"
      },
      "source": [
        "df_white = df.loc[df['race'] == 'White']\n",
        "df_white.describe()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>education-num</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       age  education-num  capital-gain  capital-loss  hours-per-week\n",
              "count  0.0            0.0           0.0           0.0             0.0\n",
              "mean   NaN            NaN           NaN           NaN             NaN\n",
              "std    NaN            NaN           NaN           NaN             NaN\n",
              "min    NaN            NaN           NaN           NaN             NaN\n",
              "25%    NaN            NaN           NaN           NaN             NaN\n",
              "50%    NaN            NaN           NaN           NaN             NaN\n",
              "75%    NaN            NaN           NaN           NaN             NaN\n",
              "max    NaN            NaN           NaN           NaN             NaN"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7Upds3ApDM4P"
      },
      "source": [
        ""
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "id": "RLRVIwDj937r",
        "outputId": "7f162424-11c1-45f8-ab9a-967779c2008d"
      },
      "source": [
        "df_POC_rich = df.loc[df['race'] =='POC'] & df.loc[df['income'] == '>50K']\n",
        "df_POC_rich"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>workclass</th>\n",
              "      <th>education_level</th>\n",
              "      <th>education-num</th>\n",
              "      <th>marital-status</th>\n",
              "      <th>occupation</th>\n",
              "      <th>relationship</th>\n",
              "      <th>race</th>\n",
              "      <th>sex</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "      <th>native-country</th>\n",
              "      <th>income</th>\n",
              "      <th>age-group</th>\n",
              "      <th>hour-per-week-group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [age, workclass, education_level, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income, age-group, hour-per-week-group]\n",
              "Index: []"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 162
        },
        "id": "8fTWXC5zALRX",
        "outputId": "20a81d32-3fdd-4fe4-bcc5-7e6db3d80d85"
      },
      "source": [
        "df_white_rich.describe()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-e1d2c49787ef>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_white_rich\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df_white_rich' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OVjfQDpf-D0G",
        "outputId": "4cade6f2-ccfe-4e86-df5a-2c7e2a084c5c"
      },
      "source": [
        "df['race'].value_counts()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " White    41762\n",
              " POC       7080\n",
              "Name: race, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IRZP37iI--pG",
        "outputId": "457e20ec-fb3f-4c2f-e8e1-f624727fccd7"
      },
      "source": [
        "df_POC_rich.value_counts()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series([], dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iShY4XhEj0wM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a930b787-469a-4894-f949-fe8fcfdae612"
      },
      "source": [
        "# Data cleansing\n",
        "# Remove outliers on hours per week\n",
        "Q1 = df['age'].quantile(0.25)\n",
        "\n",
        "\n",
        "Q3 = df['age'].quantile(0.75)\n",
        "\n",
        "\n",
        "iqr = Q3-Q1\n",
        "\n",
        "lower_limit = Q1 - 1.5*iqr\n",
        "upper_limit = Q3 + 1.5*iqr\n",
        "\n",
        "Q1, Q3, iqr, lower_limit, upper_limit\n",
        "\n",
        "df2 = df[ (df['age'] < lower_limit) | ( df['age'] > upper_limit)].value_counts()\n",
        "df2\n",
        "\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age  workclass          education_level  education-num  marital-status  occupation          relationship    race    sex      capital-gain  capital-loss  hours-per-week  native-country  income  age-group  hour-per-week-group\n",
              "90    Private            HS-grad         9               Married         Machine-op-inspct   Husband         White   Male    0             0             40               United-States   <=50K  81-90      40                     2\n",
              "                         Some-college    10              Never-married   Other-service       Not-in-family   POC     Male    0             0             35               United-States   <=50K  81-90      21-40                  2\n",
              "      Self-emp-not-inc   Some-college    10              Married         Farming-fishing     Husband         White   Male    0             0             40               United-States   <=50K  81-90      40                     1\n",
              "80    Self-emp-not-inc   Pre-HS Grad     4               Separated       Farming-fishing     Unmarried       White   Male    0             0             15               United-States   <=50K  71-80      0-20                   1\n",
              "81    Private            HS-grad         9               Separated       ?                   Not-in-family   White   Female  0             0             35               United-States   <=50K  81-90      21-40                  1\n",
              "                                                                                                                                                                                                                                  ..\n",
              "84    Private            Pre-HS Grad     3               Separated       ?                   Not-in-family   White   Male    0             0             15               United-States   <=50K  81-90      0-20                   1\n",
              "                                                         Married         ?                   Husband         White   Male    0             0             20               United-States   <=50K  81-90      0-20                   1\n",
              "                         Masters         14              Never-married   Prof-specialty      Not-in-family   White   Male    0             0             66               United-States   <=50K  81-90      61-80                  1\n",
              "                         HS-grad         9               Separated       Prof-specialty      Not-in-family   White   Female  0             0             16               United-States   <=50K  81-90      0-20                   1\n",
              "79    Federal-gov        Doctorate       16              Separated       Exec-managerial     Not-in-family   White   Male    0             0             6                United-States   >50K   71-80      0-20                   1\n",
              "Length: 214, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3hPBGuxHrl1_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "outputId": "ee1093df-e86f-4eb3-87cb-1f5c6ca253d0"
      },
      "source": [
        "df['age'].value_counts().plot(kind='bar')\n",
        "df['workclass'].value_counts()\n",
        "df['education_level'].value_counts()\n",
        "df['education-num'].value_counts().plot(kind='bar')\n",
        "df['marital-status'].value_counts().plot(kind='bar')\n",
        "df['occupation'].value_counts().plot(kind='bar')\n",
        "df['relationship'].value_counts().plot(kind='bar')\n",
        "df['race'].value_counts().plot(kind='bar')\n",
        "df['sex'].value_counts().plot(kind='bar')\n",
        "df['native-country'].value_counts().plot(kind='bar')\n",
        "df['income'].value_counts().plot(kind='bar')\n",
        "df['income'].value_counts()\n",
        "\n"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " <=50K    37155\n",
              " >50K     11687\n",
              "Name: income, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MXOl3VQa2Ipp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "be4fb773-ae77-4ca9-ea31-760f1652b173"
      },
      "source": [
        "df.groupby('income').size().plot(kind='pie')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345b8e3dd0>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uNijchB4tLoa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "outputId": "8242f906-47dc-41f6-c76c-d9bbf0f689e5"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "df.groupby('education-num')['hours-per-week'].mean().plot(kind='bar')"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345b565390>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAEJCAYAAACNNHw2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAARjElEQVR4nO3de5TcZX3H8feXRG5FhIQ1RKIuFYTSeogYgxZPtYAaxWLak9YrRg7KqZVCVVSqbRWPtVGPWE+t1ihKtCqiUFF7qmAEtWqFDQQCRK4GhCIsCl6pGvj2j9+zOg67mclvZi8Peb/OmTO/23zn2Zndzz7zzO8SmYkkqT47zXYDJEntGOCSVCkDXJIqZYBLUqUMcEmqlAEuSZWaP5NPts8+++To6OhMPqUkVW/Dhg13ZeZI9/IZDfDR0VHGxsZm8iklqXoRcfNkyx1CkaRKGeCSVCkDXJIqZYBLUqUMcEmqlAEuSZUywCWpUga4JFVqRg/kkaS5bvS0/+xruy1rjpnmlvRmD1ySKmWAS1KlDHBJqpRj4JI0zaZrXN0euCRVygCXpEoZ4JJUKQNckiplgEtSpQxwSaqUAS5JlTLAJalSBrgkVcoAl6RKGeCSVCkDXJIq5cmsJFWr35NEwdy4AMOw2QOXpEoZ4JJUKQNckiplgEtSpfwSU9KM2NG/cJwO9sAlqVIGuCRVygCXpEo5Bi5VzrHlHZc9cEmqlAEuSZVyCEXSAzgsU4e+Azwi5gFjwG2Z+ZyI2B84G1gIbACOy8xfTk8zpZlniGmu254hlFOAzR3zbwfenZkHAHcDJwyzYZKkbesrwCNiCXAM8KEyH8CRwGfKJuuAldPRQEnS5Prtgf8z8Drg/jK/ELgnM7eW+VuB/SZ7YEScGBFjETE2Pj4+UGMlSb/RM8Aj4jnAnZm5oc0TZObazFyWmctGRkbalJAkTaKfLzGPAI6NiGcDuwJ7Au8B9oqI+aUXvgS4bfqaKUnq1rMHnpl/m5lLMnMUeD7wlcx8EXARsKpstho4f9paKUl6gEH2A389cHZEvBW4HDhzOE3acfS7m5q7qEmazHYFeGZeDFxcpm8Clg+/SYObjmA0bDUM7luuYfJQekmqlIfSP8j4SUHacdgDl6RKGeCSVCkDXJIqZYBLUqUMcEmqlHuhqCf3bJHmJnvgklSpWe+Be2SaJLVjD1ySKmWAS1KlDHBJqpQBLkmVmvUvMaVhcXdH7WjsgUtSpQxwSaqUAS5JlTLAJalSBrgkVcq9UDQr3GNEGpw9cEmqlAEuSZUywCWpUga4JFXKAJekShngklQpA1ySKmWAS1KlDHBJqpQBLkmVMsAlqVIGuCRVygCXpEr1DPCI2DUiLomIKyLi6og4vSzfPyK+HRE3RMSnImLn6W+uJGlCPz3wXwBHZuahwFJgRUQ8CXg78O7MPAC4Gzhh+popSerWM8Cz8dMy+5ByS+BI4DNl+Tpg5bS0UJI0qb7GwCNiXkRsBO4ELgRuBO7JzK1lk1uB/aZ47IkRMRYRY+Pj48NosySJPgM8M+/LzKXAEmA5cHC/T5CZazNzWWYuGxkZadlMSVK37doLJTPvAS4CngzsFRETl2RbAtw25LZJkrahn71QRiJirzK9G/B0YDNNkK8qm60Gzp+uRkqSHqifixovBtZFxDyawD8nM78QEdcAZ0fEW4HLgTOnsZ2SpC49AzwzrwQeP8nym2jGwyVJs8AjMSWpUga4JFXKAJekShngklQpA1ySKmWAS1KlDHBJqpQBLkmVMsAlqVIGuCRVygCXpEoZ4JJUKQNckiplgEtSpQxwSaqUAS5JlTLAJalSBrgkVcoAl6RKGeCSVCkDXJIqZYBLUqUMcEmqlAEuSZUywCWpUga4JFXKAJekShngklQpA1ySKmWAS1KlDHBJqpQBLkmVMsAlqVIGuCRVygCXpEr1DPCIeGREXBQR10TE1RFxSlm+ICIujIjry/3e099cSdKEfnrgW4HXZOYhwJOAV0bEIcBpwPrMPBBYX+YlSTOkZ4Bn5u2ZeVmZ/gmwGdgPeC6wrmy2Dlg5XY2UJD3Qdo2BR8Qo8Hjg28CizLy9rPo+sGiKx5wYEWMRMTY+Pj5AUyVJnfoO8IjYAzgX+JvM/HHnusxMICd7XGauzcxlmblsZGRkoMZKkn6jrwCPiIfQhPfHM/O8sviOiFhc1i8G7pyeJkqSJtPPXigBnAlszswzOlZ9DlhdplcD5w+/eZKkqczvY5sjgOOATRGxsSx7A7AGOCciTgBuBv5iepooSZpMzwDPzP8GYorVRw23OZKkfnkkpiRVygCXpEoZ4JJUKQNckiplgEtSpQxwSaqUAS5JlTLAJalSBrgkVcoAl6RKGeCSVCkDXJIqZYBLUqUMcEmqlAEuSZUywCWpUga4JFXKAJekShngklQpA1ySKmWAS1KlDHBJqpQBLkmVMsAlqVIGuCRVygCXpEoZ4JJUKQNckiplgEtSpQxwSaqUAS5JlTLAJalSBrgkVcoAl6RK9QzwiPhwRNwZEVd1LFsQERdGxPXlfu/pbaYkqVs/PfCzgBVdy04D1mfmgcD6Mi9JmkE9Azwzvwb8sGvxc4F1ZXodsHLI7ZIk9dB2DHxRZt5epr8PLBpSeyRJfRr4S8zMTCCnWh8RJ0bEWESMjY+PD/p0kqSibYDfERGLAcr9nVNtmJlrM3NZZi4bGRlp+XSSpG5tA/xzwOoyvRo4fzjNkST1q5/dCD8JfAs4KCJujYgTgDXA0yPieuDoMi9JmkHze22QmS+YYtVRQ26LJGk7eCSmJFXKAJekShngklQpA1ySKmWAS1KlDHBJqpQBLkmVMsAlqVIGuCRVygCXpEoZ4JJUKQNckiplgEtSpQxwSaqUAS5JlTLAJalSBrgkVcoAl6RKGeCSVCkDXJIqZYBLUqUMcEmqlAEuSZUywCWpUga4JFXKAJekShngklQpA1ySKmWAS1KlDHBJqpQBLkmVMsAlqVIGuCRVygCXpEoZ4JJUqYECPCJWRMS1EXFDRJw2rEZJknprHeARMQ/4V+BZwCHACyLikGE1TJK0bYP0wJcDN2TmTZn5S+Bs4LnDaZYkqZfIzHYPjFgFrMjMl5X544DDM/Okru1OBE4sswcB1/ZRfh/grlYNs6Y1rTldNWto44O15qMzc6R74fzhtueBMnMtsHZ7HhMRY5m5bJjtsKY1rTm36llz8JqDDKHcBjyyY35JWSZJmgGDBPilwIERsX9E7Aw8H/jccJolSeql9RBKZm6NiJOALwHzgA9n5tVDatd2DblY05rWnJGaNbRxh6rZ+ktMSdLs8khMSaqUAS5JlTLAJalSD9oAj4iDI+KoiNija/mKAWouj4gnlulDIuLVEfHsQdva9RwfHXK9p5R2PmOAGodHxJ5lereIOD0iPh8Rb4+Ih7WseXJEPLL3ln3X2zkiXhIRR5f5F0bEeyPilRHxkAHq/m5EnBoR74mIMyLiLydeC2m2zekvMSPi+Mz8SIvHnQy8EtgMLAVOyczzy7rLMvOwFjXfRHPel/nAhcDhwEXA04EvZeY/tqjZvdtlAH8MfAUgM49tUfOSzFxepl9O8zr8B/AM4POZuaZFzauBQ8ueR2uBnwOfAY4qy/+sRc0fAT8DbgQ+CXw6M8e3t05HvY/TvDe7A/cAewDnlTZGZq5uUfNk4DnA14BnA5eX2n8K/FVmXty2vZo+EfHwzLxzttvRS0QszMwfDFQkM+fsDbil5eM2AXuU6VFgjCbEAS4foOY8moD4MbBnWb4bcGXLmpcB/w48DXhqub+9TD+1Zc3LO6YvBUbK9O8Am1rW3NzZ5q51G9u2k+YT4DOAM4Fx4IvAauChLepdWe7nA3cA88p8DPD+bOqosztwcZl+VNvfo/L4hwFrgO8APwR+QNPZWAPs1bbuNp7vv1o+bk/gn4CPAS/sWve+ljX3Bd5PcyK8hcCby+t8DrC4Rb0FXbeFwBZgb2BByzau6HqvzgSuBD4BLGpZcw2wT5leBtwE3ADc3PZvPTNnfwglIq6c4rYJWNSy7E6Z+VOAzNxCE4zPiogzaP6g29iamfdl5s+BGzPzx6X+vcD9LWsuAzYAbwR+lE2P7t7M/GpmfrVlzZ0iYu+IWEjT8xwv7fwZsLVlzasi4vgyfUVELAOIiMcCv2pZMzPz/sy8IDNPAB4BvA9YQfPLvb12KgeUPZQmbCeGdnYBWg+h8JtjJXah6dWTmbcMWPMc4G7gaZm5IDMX0nzyurus224RcdgUtyfQfApt4yM0fy/nAs+PiHMjYpey7kkta54FXAN8j+YT7L00n26+Dvxbi3p30fwNTdzGgP1oOkdjLdv4to7pd9F0qv6EpkP0gZY1j8nMifOevBN4XmYeQPMJ/l0ta85+D5ymt7QUeHTXbRT435Y1vwIs7Vo2H/gocF/Lmt8Gdi/TO3X9h76sTc2OGkuATwPvpeWnjo5aW2gC8LvlfnFZvgfte8sPo/nDu7G8Dr8qtb9KM4TSpuaUPdiJ13k7672qtOlm4GRgPfBBmt7dm1q28RSantcHaXrLx5flI8DXBniPrm2zrkfN+8rv/UWT3O5tWXNj1/wbgW/Q9HJb/c7z258Qb9nW8/VZ7zU0n9we17Hsu23fm/L4y6Zq0wB/Q5uB+WX6f7rWtfpknJlzIsDPBJ4yxbpPtKy5BNh3inVHtKy5yxTL9+n85RnwtTgGeNs0vc67A/sPWGNP4FDgCbT8KNlR67HT8DM+AnhEmd4LWAUsH7Dm75c6Bw+xnRcAr+t8DWk+bb4e+HLLmlcBB06x7nsta26mo7NSlr0UuBq4uWXNKzqm39q1ru0Q30QH6AyaT2A3Dfj+3Aq8uvxzuInyXWFZ13Y47q/L+34kzbDRe2iGSk8HPta2rXP6S0zpwSgi9gZOozl//sPL4jtoziW0JjPvblFzFU0APuB0zRGxMjM/26LmO4ALMvPLXctXAP+SmQe2qPkW4B1Zhjg7lh9A87Ov2t6aHTWOBd4AjGbmvgPUeVPXovdl5nhE7EvT9pe0rPs04BXAY2lGBL4HfJbmNCSthjcNcGkOabvnlTV/XWM34DGZedVcbeMwaxrg0hwSEbdk5qOsOffqzcWa035BB0m/LSKunGoVLfe82lFr1tDG6aoJBrg0GxYBz6TZbbBTAN+05qzWq6mmAS7Ngi/QHGi2sXtFRFxszVmtV1NNx8AlqVazfiSmJKkdA1ySKmWAa06KiJdGxHuHXHNlRBzSMf+WidPPSjUywLUjWQn8OsAz8x+6jzKUamKAa1ZExIsj4pKI2BgRH4iIeRFxfERcFxGXAEd0bHtWOVR8Yv6nHdOvj4hNEXFFRKwpy14eEZeWZedGxO4R8YfAscA7y3M+prNuNBf/uLzU+vDEWfciYks0F7C4rKw7eIqfZ9LtIuLNEXFqx3ZXRcRouX2ntOG6iPh4RBwdEd+IiOsjYvlQX3A9KBngmnER8XvA82hOLLaU5kx6L6Y5sc8RwFPo6Clvo86zaM4ncnhmHgq8o6w6LzOfWJZtBk7IzG/SnGvktZm5NDNv7KizK83ZFp+XmY+j2b32FR1PdVc2FwF5P3AqU+t3uwkH0JxK9OByeyHNz34qzTk9pG0ywDUbjqI5o+GlEbGxzL+K5oIJ45n5S+BTfdQ5GvhINudoJzN/WJb/QUR8vZxT/kU0ZxTcloNoTkF6XZlfB/xRx/rzyv0GmtMcT6Xf7SZ8NzM3Zeb9NGf4W5/Nfr2b+ny8dnAGuGZDAOtKT3hpZh5Ec4rNqWyl/K5GxE7Azj3qnwWcVHrTpwO7DtjeX5T7+ygHv0XEl8pQzIe2tV1n24tdJ9kemouC/KJj2oPs1JMBrtmwHlgVEQ8HiIgFNJdYe2pELIzmIsR/3rH9FpoeOzTj2BNXw7kQOD4idu+oA805oW8vdV7UUecnZV23a4HRckpTgONoLlYxpcx8Zvnn87IeP+sW4LDSvsOA/XtsL/XNANeMy8xrgL8DLign+bkQWEzTC/8WzVVfNnc85IM04X4F8GSaiyGTmV+kGdceK0MxE+POf09z5aBv0FxJZ8LZwGvLl5WP6WjP/wHHA58uwy730+7yXpM5F1gQzYWhTwKu67G91DcPpZekStkDl6RKGeCSVCkDXJIqZYBLUqUMcEmqlAEuSZUywCWpUga4JFXq/wHmafvAXb7s6AAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X9WWMWB5OJpv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "outputId": "c118dd10-1dd2-40ba-fdf5-b13b56e115a7"
      },
      "source": [
        "df.groupby('education-num')['capital-gain'].mean().plot(kind='bar')"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345b5ed850>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sshJTHuOVYmS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "outputId": "a851ed97-d89b-4aee-ba72-13bd551fbed9"
      },
      "source": [
        "df.groupby('education-num')['capital-loss'].mean().plot(kind='bar')"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345b030910>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E0PxOqpzDJAG"
      },
      "source": [
        "df_highereducation= df.loc[df['education-num'] >= 13]\n",
        "df_lowereducation= df.loc[df['education-num']<=12]"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NzimGAlfD0fc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "48e84e57-9579-471e-8b8f-7d546b9e523c"
      },
      "source": [
        "df_lowereducation['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345af6d210>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XdbuOGNbD2YR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "9b9f3f76-5176-4ad5-ce35-2ce6ae268783"
      },
      "source": [
        "df_highereducation['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345af42550>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yp9Z3NFYD-SB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "f2cc0aaf-2d0c-4f05-cac4-7d84d57ee1b8"
      },
      "source": [
        "df_aboveaverageworker= df.loc[df['hours-per-week']> 35]\n",
        "df_underaverageworker= df.loc[df['hours-per-week']<=35]\n",
        "df_aboveaverageworker.describe()"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>education-num</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>38510.000000</td>\n",
              "      <td>38510.000000</td>\n",
              "      <td>38510.000000</td>\n",
              "      <td>38510.000000</td>\n",
              "      <td>38510.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>39.212854</td>\n",
              "      <td>10.215684</td>\n",
              "      <td>1239.556505</td>\n",
              "      <td>96.246819</td>\n",
              "      <td>44.880213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>12.154861</td>\n",
              "      <td>2.565714</td>\n",
              "      <td>8055.429523</td>\n",
              "      <td>421.932803</td>\n",
              "      <td>8.925550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>36.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>30.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>40.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>38.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>40.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>47.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>90.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>99999.000000</td>\n",
              "      <td>4356.000000</td>\n",
              "      <td>99.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                age  education-num  capital-gain  capital-loss  hours-per-week\n",
              "count  38510.000000   38510.000000  38510.000000  38510.000000    38510.000000\n",
              "mean      39.212854      10.215684   1239.556505     96.246819       44.880213\n",
              "std       12.154861       2.565714   8055.429523    421.932803        8.925550\n",
              "min       17.000000       1.000000      0.000000      0.000000       36.000000\n",
              "25%       30.000000       9.000000      0.000000      0.000000       40.000000\n",
              "50%       38.000000      10.000000      0.000000      0.000000       40.000000\n",
              "75%       47.000000      13.000000      0.000000      0.000000       50.000000\n",
              "max       90.000000      16.000000  99999.000000   4356.000000       99.000000"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JCsrIQf0D_d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "0487c1e2-2d68-42fc-de71-e7a67e563cfe"
      },
      "source": [
        "df_underaverageworker['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345af13510>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N0g8c8lxEDhI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "2cb048e9-ca16-47f5-f2da-f86ed0e5cf18"
      },
      "source": [
        "df_aboveaverageworker['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345aed9250>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QaO3_KirFLFU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        },
        "outputId": "e8abb943-aadc-46b1-d104-c367057ae495"
      },
      "source": [
        "\n",
        "df.groupby(['sex','income']).size().unstack().plot(kind='bar',stacked=True)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345aea2690>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WwBHMcXzF6eq"
      },
      "source": [
        "df['income'] = df['income'].str.replace('<=50K.','<=50K')\n",
        "df['income'] = df['income'].str.replace('>50K.','>50K')"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RsDlWsBiGpvw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "outputId": "c50e824b-1022-4427-bd4f-f5dc3fc2c06e"
      },
      "source": [
        "df.groupby(['race', 'income']).size().plot(kind='bar')\n",
        "df.groupby(['race','income']).size().unstack().plot(kind='bar',stacked=True)\n"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345b797b50>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AdqIpWInHE7Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 670
        },
        "outputId": "907d697a-53e4-4092-b090-83925ac8539c"
      },
      "source": [
        "df.groupby(['sex', 'income']).size().plot(kind='bar')\n",
        "df.groupby(['sex','income']).size().unstack().plot(kind='bar',stacked=True)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f345acbd4d0>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BZhQfzroHQ_S"
      },
      "source": [
        "df_male=df[df['sex']== 'male']\n"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "apqmbX8NNDDw",
        "outputId": "fc6f119f-63be-4311-c2c7-fc404a676c2d"
      },
      "source": [
        "pd.get_dummies(df['sex'])\n"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Female</th>\n",
              "      <th>Male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48837</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48838</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48839</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48840</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48841</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>48842 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        Female   Male\n",
              "0            0      1\n",
              "1            0      1\n",
              "2            0      1\n",
              "3            0      1\n",
              "4            1      0\n",
              "...        ...    ...\n",
              "48837        1      0\n",
              "48838        0      1\n",
              "48839        0      1\n",
              "48840        0      1\n",
              "48841        0      1\n",
              "\n",
              "[48842 rows x 2 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DKbJ9jZvNE0f",
        "outputId": "742f32f7-00c0-4863-e224-86ec3e12c0b9"
      },
      "source": [
        "pd.get_dummies(df.loc[:, 'income']).iloc[:, 0].head(8) #get values <50K\n",
        "\n",
        "#df.head(5)\n",
        "#pd.get_dummies(df.loc[:, 'age-group']).head(5) #get values <50K\n",
        "\n"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1\n",
              "1    1\n",
              "2    1\n",
              "3    1\n",
              "4    1\n",
              "5    1\n",
              "6    1\n",
              "7    0\n",
              "Name:  <=50K, dtype: uint8"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G48hbawfPdcb"
      },
      "source": [
        "df.loc[:, 'income_bin']=pd.get_dummies(df.loc[:, 'income']).iloc[:, 0] #get values <50K"
      ],
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BGtnZ7eQNMtX",
        "outputId": "ab681f47-c75a-44f9-c545-5400ae72fda7"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rfc=RandomForestClassifier()\n",
        "X=pd.get_dummies(df[['age-group', 'hour-per-week-group', 'sex']])\n",
        "y=df['income_bin']\n",
        "rfc.fit(X, y)\n"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8Oc7bkelNZIo"
      },
      "source": [
        "df.loc[:, 'income_bin']=pd.get_dummies(df.loc[:, 'income']).iloc[:, 1]#get values >50K\n"
      ],
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Ak8B4DkNat8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82c15109-7804-4775-f77a-3c49ad9aea0a"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rfc2=RandomForestClassifier()\n",
        "X=pd.get_dummies(df[['race', 'hour-per-week-group', 'sex']])\n",
        "y=df['income_bin']\n",
        "rfc2.fit(X, y)"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jMwvUloLNvkM"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_0JrgxBrNecG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "186501df-1a6a-4e63-b386-14e3c00c4812"
      },
      "source": [
        "sorted(list(zip(rfc2.feature_importances_ , X.columns)), reverse=True)"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(0.32889442591129736, 'hour-per-week-group_41-60'),\n",
              " (0.1970818064442668, 'sex_ Male'),\n",
              " (0.17930983468886885, 'sex_ Female'),\n",
              " (0.09802796883055151, 'hour-per-week-group_0-20'),\n",
              " (0.0894298520319181, 'hour-per-week-group_21-40'),\n",
              " (0.04631876904992704, 'hour-per-week-group_40'),\n",
              " (0.025904192051442503, 'hour-per-week-group_61-80'),\n",
              " (0.01772690370404, 'race_ POC'),\n",
              " (0.014739238932177379, 'race_ White'),\n",
              " (0.0025670083555105316, 'hour-per-week-group_>80')]"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uN4bY7beNwRw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ac4a1fb2-6466-4464-f05e-7d695520e41a"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rfc2=RandomForestClassifier()\n",
        "X=pd.get_dummies(df[['age-group', 'hour-per-week-group', 'sex']])\n",
        "y=df['income_bin']\n",
        "rfc2.fit(X, y)"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7I-jV0wtPHpT",
        "outputId": "e2f88687-583b-4f1f-e76b-cf7c1421ea47"
      },
      "source": [
        "pd.get_dummies(df.loc[:, 'race']).iloc[:, 0].head(5)"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0\n",
              "1    0\n",
              "2    0\n",
              "3    1\n",
              "4    1\n",
              "Name:  POC, dtype: uint8"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4g_3Xrl6UgO1"
      },
      "source": [
        "df.loc[:, 'Female']=pd.get_dummies(df.loc[:, 'sex']).iloc[:, 0]"
      ],
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KRihgBD5UkBo"
      },
      "source": [
        "df_female= df.loc[:, 'Female']"
      ],
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mzNOiJ8kUmMs",
        "outputId": "97d36d7b-5d21-4a9a-b51a-d0336acabd00"
      },
      "source": [
        "df_female"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        0\n",
              "1        0\n",
              "2        0\n",
              "3        0\n",
              "4        1\n",
              "        ..\n",
              "48837    1\n",
              "48838    0\n",
              "48839    0\n",
              "48840    0\n",
              "48841    0\n",
              "Name: Female, Length: 48842, dtype: uint8"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2iU66tOPUrRg",
        "outputId": "6ba73f2c-b4d9-45cb-8c77-4efc8f3e0ad1"
      },
      "source": [
        "df_female.value_counts()"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    32650\n",
              "1    16192\n",
              "Name: Female, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vzrXwBt5Uv5T"
      },
      "source": [
        "df_Female= df.loc[df['Female']== 1]"
      ],
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PSFe6uNRVJdR"
      },
      "source": [
        "df_Male= df.loc[df['Female']== 0]"
      ],
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 655
        },
        "id": "3CJdePabU1d3",
        "outputId": "ec8ff30c-772c-4ade-d175-75aa382939f2"
      },
      "source": [
        "df_Female"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>workclass</th>\n",
              "      <th>education_level</th>\n",
              "      <th>education-num</th>\n",
              "      <th>marital-status</th>\n",
              "      <th>occupation</th>\n",
              "      <th>relationship</th>\n",
              "      <th>race</th>\n",
              "      <th>sex</th>\n",
              "      <th>capital-gain</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>hours-per-week</th>\n",
              "      <th>native-country</th>\n",
              "      <th>income</th>\n",
              "      <th>age-group</th>\n",
              "      <th>hour-per-week-group</th>\n",
              "      <th>income_bin</th>\n",
              "      <th>Female</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Married</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Wife</td>\n",
              "      <td>POC</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>Cuba</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>21-30</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>37</td>\n",
              "      <td>Private</td>\n",
              "      <td>Masters</td>\n",
              "      <td>14</td>\n",
              "      <td>Married</td>\n",
              "      <td>Exec-managerial</td>\n",
              "      <td>Wife</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>31-40</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>49</td>\n",
              "      <td>Private</td>\n",
              "      <td>Pre-HS Grad</td>\n",
              "      <td>5</td>\n",
              "      <td>Separated</td>\n",
              "      <td>Other-service</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>POC</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>Jamaica</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>41-50</td>\n",
              "      <td>0-20</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>31</td>\n",
              "      <td>Private</td>\n",
              "      <td>Masters</td>\n",
              "      <td>14</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>14084</td>\n",
              "      <td>0</td>\n",
              "      <td>50</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K</td>\n",
              "      <td>31-40</td>\n",
              "      <td>41-60</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>23</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Own-child</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>21-30</td>\n",
              "      <td>21-40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48826</th>\n",
              "      <td>50</td>\n",
              "      <td>Local-gov</td>\n",
              "      <td>Masters</td>\n",
              "      <td>14</td>\n",
              "      <td>Married</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Wife</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&gt;50K</td>\n",
              "      <td>41-50</td>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48827</th>\n",
              "      <td>55</td>\n",
              "      <td>Private</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Separated</td>\n",
              "      <td>Priv-house-serv</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>32</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>51-60</td>\n",
              "      <td>21-40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48828</th>\n",
              "      <td>38</td>\n",
              "      <td>Private</td>\n",
              "      <td>Associate</td>\n",
              "      <td>11</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Adm-clerical</td>\n",
              "      <td>Unmarried</td>\n",
              "      <td>POC</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>31-40</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48834</th>\n",
              "      <td>25</td>\n",
              "      <td>Private</td>\n",
              "      <td>HS-grad</td>\n",
              "      <td>9</td>\n",
              "      <td>Never-married</td>\n",
              "      <td>Other-service</td>\n",
              "      <td>Own-child</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>21-30</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48837</th>\n",
              "      <td>39</td>\n",
              "      <td>Private</td>\n",
              "      <td>Bachelors</td>\n",
              "      <td>13</td>\n",
              "      <td>Separated</td>\n",
              "      <td>Prof-specialty</td>\n",
              "      <td>Not-in-family</td>\n",
              "      <td>White</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>United-States</td>\n",
              "      <td>&lt;=50K</td>\n",
              "      <td>31-40</td>\n",
              "      <td>21-40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>16192 rows × 18 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       age   workclass education_level  ...  hour-per-week-group income_bin Female\n",
              "4       28     Private       Bachelors  ...                   40          0      1\n",
              "5       37     Private         Masters  ...                   40          0      1\n",
              "6       49     Private     Pre-HS Grad  ...                 0-20          0      1\n",
              "8       31     Private         Masters  ...                41-60          1      1\n",
              "12      23     Private       Bachelors  ...                21-40          0      1\n",
              "...    ...         ...             ...  ...                  ...        ...    ...\n",
              "48826   50   Local-gov         Masters  ...                   40          1      1\n",
              "48827   55     Private         HS-grad  ...                21-40          0      1\n",
              "48828   38     Private       Associate  ...                   40          0      1\n",
              "48834   25     Private         HS-grad  ...                   40          0      1\n",
              "48837   39     Private       Bachelors  ...                21-40          0      1\n",
              "\n",
              "[16192 rows x 18 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "leIgRc-pVM2t",
        "outputId": "3d60991c-b982-48e6-a710-b633e1d0c783"
      },
      "source": [
        "df_Male['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455e42a10>"
            ]
          },
          "metadata": {},
          "execution_count": 83
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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w10DPEgBVsfUU1oWeEG0DcksKxOB7bt/fjCr3547+AtrRNg893D2zSbZhb2BWj2zm2hEZBOSqwP/HdiSZGKM640xy7o9zwOmGmP2E5ELAYwx30k/dxdQM8Y8lB4o2waYDvzeGHNRVtl7o6W2yAuiQSS7gJNIrisH4JTqXTO+Oei6D673C92zkmQaqSvzODUlIt8FTiBZieMXxpgnun1+uDHm1fT984BDjDEnisj7gBtJXkdvT1LgPYwx7SKywhgzRESGAQ8AlxhjMr0waX201AXhBdGBwMnASQ9sNDneqfL6IbYz5eAJkpcjN1Kr57ZaSnqK6h5jTI8vcUTkepJdbwPEwIQuJf8Kyei+FjjXGHNH+vEVxpgh6fs7AfcDk40xt2f847w7v5a6WLwgqs4dfMpHNpY1nwHGAq4dLFtEckDpKmr1x2yHcZGWushqW1SBI0h20Y8iOYpeNsuBP5Hsqt5NrT7Hch7naanLpLbFtiSvvQ9NH6OgcBMRrgFm0FlimEmtvtZupNaipS6z2hZtwAj+WfJDyXc0f4vkZopn0sdjwP3U6is2+FUqU1pq19S22AwYTnJ0dvsu73d/O7TLV60BVqdve3q8BrxEsipk59v5QEytbn1SRrUuLXWrqm2xEdChu8bu0VIr5Ri9TFQpx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx2iplXKMllopx/w/OXVbA3f783IAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "k-T7g4iVV4dO",
        "outputId": "37ca312b-3f7c-425b-c8d2-227220ae193e"
      },
      "source": [
        "df_Female['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455e71410>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ozR1mrx4XigB"
      },
      "source": [
        "df.loc[:, 'POC']=pd.get_dummies(df.loc[:, 'race']).iloc[:, 0]"
      ],
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1o0Ehk2vXk5a"
      },
      "source": [
        "df_1POC= df.loc[:, 'POC']"
      ],
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PPHlelwogC-r",
        "outputId": "2c45a185-c967-4418-b617-bbf40fe92a4c"
      },
      "source": [
        "df['race'].value_counts()"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " White    41762\n",
              " POC       7080\n",
              "Name: race, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HK-ZE9QDXo--"
      },
      "source": [
        "df_POC= df.loc[df['POC']== 1]"
      ],
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gO-Mp-1zgi0v",
        "outputId": "b3137967-0de9-4faf-8750-7b4d42fcba56"
      },
      "source": [
        "df_POC.value_counts()"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age  workclass     education_level  education-num  marital-status  occupation          relationship    race  sex      capital-gain  capital-loss  hours-per-week  native-country  income  age-group  hour-per-week-group  income_bin  Female  POC\n",
              "39    Private       Some-college    10              Separated       Adm-clerical        Unmarried       POC   Female  0             0             40               United-States   <=50K  31-40      40                   0           1       1      5\n",
              "19    Private       HS-grad         9               Never-married   Other-service       Own-child       POC   Female  0             0             40               United-States   <=50K  10-20      40                   0           1       1      4\n",
              "26    Private       Some-college    10              Married         Machine-op-inspct   Husband         POC   Male    0             0             40               United-States   <=50K  21-30      40                   0           0       1      4\n",
              "36    Private       HS-grad         9               Separated       Adm-clerical        Unmarried       POC   Female  0             0             40               United-States   <=50K  31-40      40                   0           1       1      4\n",
              "28    Private       Some-college    10              Never-married   Adm-clerical        Unmarried       POC   Female  0             0             40               United-States   <=50K  21-30      40                   0           1       1      4\n",
              "                                                                                                                                                                                                                                                    ..\n",
              "43    Local-gov     HS-grad         9               Separated       Farming-fishing     Unmarried       POC   Male    0             0             40               United-States   <=50K  41-50      40                   0           0       1      1\n",
              "                                                                    Tech-support        Not-in-family   POC   Female  0             0             40               United-States   <=50K  41-50      40                   0           1       1      1\n",
              "                    Masters         14              Married         Exec-managerial     Wife            POC   Female  0             0             50               United-States   >50K   41-50      41-60                1           1       1      1\n",
              "                                                                    Prof-specialty      Wife            POC   Female  0             0             35               United-States   >50K   41-50      21-40                1           1       1      1\n",
              "17    Federal-gov   Pre-HS Grad     7               Never-married   Adm-clerical        Not-in-family   POC   Female  0             1602          40               United-States   <=50K  10-20      40                   0           1       1      1\n",
              "Length: 6821, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3BHmDcBVf7JB",
        "outputId": "d189ad3f-b092-4862-adb5-af0081bfda2c"
      },
      "source": [
        "df_POC.count()"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age                    7080\n",
              "workclass              7080\n",
              "education_level        7080\n",
              "education-num          7080\n",
              "marital-status         7080\n",
              "occupation             7080\n",
              "relationship           7080\n",
              "race                   7080\n",
              "sex                    7080\n",
              "capital-gain           7080\n",
              "capital-loss           7080\n",
              "hours-per-week         7080\n",
              "native-country         7080\n",
              "income                 7080\n",
              "age-group              7080\n",
              "hour-per-week-group    7080\n",
              "income_bin             7080\n",
              "Female                 7080\n",
              "POC                    7080\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "4Fls-dZ4Xu0n",
        "outputId": "bbb65ed7-e591-431a-b83b-865a6a9730ac"
      },
      "source": [
        "df_POC['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455d3a590>"
            ]
          },
          "metadata": {},
          "execution_count": 91
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g0mZM_i8YDtM"
      },
      "source": [
        "df_White = df.loc[df['POC']== 0]"
      ],
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "zl-mukG-YJH0",
        "outputId": "d9ef8b35-0be5-4915-c2ce-73d5b0a6e96c"
      },
      "source": [
        "df_White['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455d17710>"
            ]
          },
          "metadata": {},
          "execution_count": 93
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uw3okP8wY4Hk"
      },
      "source": [
        "df_MalePOC= df_POC.loc[df['Female']==0]"
      ],
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "MitqyCHIZVwc",
        "outputId": "85d9050a-9f91-4b4f-c08b-617879b5100a"
      },
      "source": [
        "df_MalePOC['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455cdfb10>"
            ]
          },
          "metadata": {},
          "execution_count": 95
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ipNy6fg_ZqB4"
      },
      "source": [
        "df_FemalePOC= df_POC.loc[df['Female']==1]"
      ],
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "6z7bFNruZuns",
        "outputId": "5659af24-e558-404f-ded6-7086061a4d4e"
      },
      "source": [
        "df_FemalePOC['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455c98ad0>"
            ]
          },
          "metadata": {},
          "execution_count": 97
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YII8Miq8bEzS"
      },
      "source": [
        "df_WhiteMale = df_White.loc[df['Female']== 0]"
      ],
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "6-SZuuJ7bMDt",
        "outputId": "149c50e7-09e4-4664-8176-88b7e5a36e31"
      },
      "source": [
        "df_WhiteMale['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455bfa450>"
            ]
          },
          "metadata": {},
          "execution_count": 99
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_9CjAj3cbsJg"
      },
      "source": [
        "df_WhiteFemale= df_White.loc[df['Female']== 1]"
      ],
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "neSqf1xpbj7n",
        "outputId": "650068b7-5c2e-4001-8561-adf7014d7511"
      },
      "source": [
        "df_WhiteFemale['income'].value_counts().plot(kind='pie')"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3455bc49d0>"
            ]
          },
          "metadata": {},
          "execution_count": 101
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tn75ORTvdMG-",
        "outputId": "16b752ea-eda6-4e9a-8d49-95281f2082ae"
      },
      "source": [
        "df['native-country'].value_counts()"
      ],
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " United-States                 44689\n",
              " Mexico                          951\n",
              " Philippines                     295\n",
              " Germany                         206\n",
              " Puerto-Rico                     184\n",
              " Canada                          182\n",
              " El-Salvador                     155\n",
              " India                           151\n",
              " Cuba                            138\n",
              " England                         127\n",
              " China                           122\n",
              " South                           115\n",
              " Jamaica                         106\n",
              " Italy                           105\n",
              " Dominican-Republic              103\n",
              " Japan                            92\n",
              " Guatemala                        88\n",
              " Poland                           87\n",
              " Vietnam                          86\n",
              " Columbia                         85\n",
              " Haiti                            75\n",
              " Portugal                         67\n",
              " Taiwan                           65\n",
              " Iran                             59\n",
              " Nicaragua                        49\n",
              " Greece                           49\n",
              " Peru                             46\n",
              " Ecuador                          45\n",
              " France                           38\n",
              " Ireland                          37\n",
              " Hong                             30\n",
              " Thailand                         30\n",
              " Cambodia                         28\n",
              " Trinadad&Tobago                  27\n",
              " Laos                             23\n",
              " Yugoslavia                       23\n",
              " Outlying-US(Guam-USVI-etc)       23\n",
              " Scotland                         21\n",
              " Honduras                         20\n",
              " Hungary                          19\n",
              " Holand-Netherlands                1\n",
              "Name: native-country, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GPk4B-W5egrz",
        "outputId": "5e21ab08-317a-4515-d210-f1845ad11f6d"
      },
      "source": [
        "df['sex'].value_counts()"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " Male      32650\n",
              " Female    16192\n",
              "Name: sex, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXijkqcqfeZB",
        "outputId": "b5664502-a9be-4492-82d4-10ecba792b86"
      },
      "source": [
        "df_White.value_counts()"
      ],
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age  workclass   education_level  education-num  marital-status  occupation        relationship  race    sex      capital-gain  capital-loss  hours-per-week  native-country  income  age-group  hour-per-week-group  income_bin  Female  POC\n",
              "33    Private     HS-grad         9               Married         Craft-repair      Husband       White   Male    0             0             40               United-States   <=50K  31-40      40                   0           0       0      21\n",
              "32    Private     HS-grad         9               Married         Craft-repair      Husband       White   Male    0             0             40               United-States   <=50K  31-40      40                   0           0       0      20\n",
              "35    Private     HS-grad         9               Married         Craft-repair      Husband       White   Male    0             0             40               United-States   <=50K  31-40      40                   0           0       0      20\n",
              "21    Private     Some-college    10              Never-married   ?                 Own-child     White   Female  0             0             40               United-States   <=50K  21-30      40                   0           1       0      19\n",
              "20    Private     Some-college    10              Never-married   ?                 Own-child     White   Female  0             0             40               United-States   <=50K  10-20      40                   0           1       0      19\n",
              "                                                                                                                                                                                                                                                 ..\n",
              "45    Private     HS-grad         9               Married         Exec-managerial   Husband       White   Male    0             0             50               United-States   <=50K  41-50      41-60                0           0       0       1\n",
              "                                                                                                                                              55               United-States   >50K   41-50      41-60                1           0       0       1\n",
              "                                                                                                                                              60               United-States   >50K   41-50      41-60                1           0       0       1\n",
              "                                                                                    Wife          White   Female  0             0             50               United-States   >50K   41-50      41-60                1           1       0       1\n",
              "17    Local-gov   Pre-HS Grad     5               Never-married   Other-service     Own-child     White   Male    0             0             45               United-States   <=50K  10-20      41-60                0           0       0       1\n",
              "Length: 35226, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fZaK4nE5fsfN",
        "outputId": "5c5aa9b7-f91f-4c38-bb7a-dbb7e2ad9270"
      },
      "source": [
        "df_POC.value_counts()"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age  workclass     education_level  education-num  marital-status  occupation          relationship    race  sex      capital-gain  capital-loss  hours-per-week  native-country  income  age-group  hour-per-week-group  income_bin  Female  POC\n",
              "39    Private       Some-college    10              Separated       Adm-clerical        Unmarried       POC   Female  0             0             40               United-States   <=50K  31-40      40                   0           1       1      5\n",
              "19    Private       HS-grad         9               Never-married   Other-service       Own-child       POC   Female  0             0             40               United-States   <=50K  10-20      40                   0           1       1      4\n",
              "26    Private       Some-college    10              Married         Machine-op-inspct   Husband         POC   Male    0             0             40               United-States   <=50K  21-30      40                   0           0       1      4\n",
              "36    Private       HS-grad         9               Separated       Adm-clerical        Unmarried       POC   Female  0             0             40               United-States   <=50K  31-40      40                   0           1       1      4\n",
              "28    Private       Some-college    10              Never-married   Adm-clerical        Unmarried       POC   Female  0             0             40               United-States   <=50K  21-30      40                   0           1       1      4\n",
              "                                                                                                                                                                                                                                                    ..\n",
              "43    Local-gov     HS-grad         9               Separated       Farming-fishing     Unmarried       POC   Male    0             0             40               United-States   <=50K  41-50      40                   0           0       1      1\n",
              "                                                                    Tech-support        Not-in-family   POC   Female  0             0             40               United-States   <=50K  41-50      40                   0           1       1      1\n",
              "                    Masters         14              Married         Exec-managerial     Wife            POC   Female  0             0             50               United-States   >50K   41-50      41-60                1           1       1      1\n",
              "                                                                    Prof-specialty      Wife            POC   Female  0             0             35               United-States   >50K   41-50      21-40                1           1       1      1\n",
              "17    Federal-gov   Pre-HS Grad     7               Never-married   Adm-clerical        Not-in-family   POC   Female  0             1602          40               United-States   <=50K  10-20      40                   0           1       1      1\n",
              "Length: 6821, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    }
  ]
}